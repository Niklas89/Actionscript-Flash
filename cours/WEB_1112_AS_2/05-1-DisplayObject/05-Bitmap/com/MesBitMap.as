package com {		import flash.display.MovieClip;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;		import flash.filters.DisplacementMapFilter;	import flash.filters.DisplacementMapFilterMode;		import flash.geom.Point;	import flash.net.URLRequest;		import flash.events.Event;		import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFormat;		public class MesBitMap extends MovieClip {								private var bitmapSrc	:Bitmap;		private var imageGris	:BitmapData;		private var loader		:Loader;				private var logo		:MovieClip;		private var znTexte		:MovieClip;		private var maFont		:Font;		private var monTexte	:TextField;		private var monFormat	:TextFormat;				private var texteTS		:String		= "Institut de l'Internet \net du Multimédia";				public function MesBitMap() {			// chargement et affichage du teeShirt			var loader			:Loader		= new Loader();			loader.load(new URLRequest("img/T-Shirt.png"));			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event){addChild(e.target.content);																						initContenu();																						});		}		private function initContenu():void		{			loader							= new Loader();			loader.load(new URLRequest("img/logo.png"));			//loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onProgress);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, addLogo);		}		private function addLogo(e:Event):void		{			logo							= new MovieClip();			logo.x							= 225;			logo.y							= 110;			logo.addChild(e.target.content);			this.addChild(logo);						loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, addLogo);			loader.load(new URLRequest("img/echelleDeGris.jpg"));			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, addFiltreEtTexte);		}		private function addFiltreEtTexte(e:Event):void		{			// creation du texte 			maFont							= new MonArialBlack();			monFormat						= new TextFormat(maFont.fontName,26,0xFF0000,null,null,null,null,null,"center");			monTexte						= new TextField();			monTexte.type					= "input";			monTexte.width					= 200;			monTexte.height					= 250;			monTexte.multiline				= true;			monTexte.wordWrap				= true;			//monTexte.selectable				= false;			monTexte.embedFonts				= true;			monTexte.defaultTextFormat		= monFormat;			monTexte.text 					= texteTS.toLocaleUpperCase();			// un movie clip qui contiendra le texte			znTexte							= new MovieClip();			znTexte.addChild(monTexte);			znTexte.x						= 135;			znTexte.y						= 225;			this.addChild(znTexte);			// creation du filtre			bitmapSrc 			= e.target.content;// Bitmap			imageGris			= bitmapSrc.bitmapData;// BitmapData						loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, addFiltreEtTexte);			loader 				= null;						// Création du filtre de mappage de déplacement et de ses parametres : 			// quelle image map (niveau de gris)			// position de l'image			// canal couleur 1=rouge, 2=vert, 4=bleu, 8=transparent (ici en x et y - 2 params)			// deplacement axe x et axe y (2 params)			// mode de filtre :			// DisplacementMapFilterMode.WRAP — Ramène la valeur de déplacement à l’autre côté de l’image source.			// DisplacementMapFilterMode.CLAMP — Corrige la valeur de déplacement en fonction du bord de l’image source.			// DisplacementMapFilterMode.IGNORE — Si la valeur de déplacement est hors limites, ignore le déplacement et utilise le pixel source.			// DisplacementMapFilterMode.COLOR — Si la valeur de déplacement est en dehors de l’image, remplace les valeurs des propriétés color et alpha.			var filtreDeplacement:DisplacementMapFilter = new DisplacementMapFilter(imageGris,new Point(0,0),2,2,15,10,DisplacementMapFilterMode.COLOR);			//application du filtre de déplacement			logo.filters		= [filtreDeplacement];			znTexte.filters		= [filtreDeplacement];		}	}}